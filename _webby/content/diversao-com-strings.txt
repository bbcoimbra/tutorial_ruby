---
title:      Diversão com strings
created_at: 2009-05-24 13:56:49.734412 -03:00
filter:
  - erb
  - textile
---
p(title). <%= h(@page.title) %>

Literais string são sequências (ou cadeias) de caracteres entre aspas simples ou dupla. '' (duas aspas simples) que não contêm nada dentro delas; nós chamamos de string vazia. Aqui está um programa *p003stringsruby.rb* que explora strings a um certo nível.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
# p003stringsruby.rb  
=begin  
  Strings Ruby
  Em Ruby, strings são mutáveis  
=end  

puts "Olá Mundo"
# Pode-se usar " ou ' para strings, mas ' é mais eficiente  
puts 'Olá Mundo'  
# Concatenação de strings  
puts 'Eu gosto de' + ' Ruby'  
# Sequência com escape
puts 'It\'s my Ruby'  
# Exibe a string 3 vezes  
puts 'Olá' * 3  
# Definindo uma constante
# Mais sobre constantes depois, aqui  
# nomes_em_ruby.html  
PI = 3.1416
puts PI
<% end -%>


<div class='box'>
# Se é passado ao *puts* um objeto que não é uma string, o *puts* chama o método *to_s* deste objeto e imprime a string retornada pelo método.
# Em Ruby, strings são *mutáveis*. Elas podem expandir quando necessário, sem utilizar muito tempo ou memória. O Ruby armazena uma string como uma sequência de caracteres.
</div>

Vale a pena saber que existe um tipo especial de string que usa acento grave (`) como delimitador de início e fim. Por exemplo:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
puts `dir`
<% end -%>


A string é enviada para o sistema operacional como um comando a ser executado (no exemplo nós estamos enviando o comando dir para o sistema operacional Windows), a saída do comando (dir numa janela de comando exibiria todos os arquivos e subdiretórios de um diretório) é então exibida pelo *puts*.

No Linux e no Mac, você pode usar, ao invés:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
puts `ls`
<% end -%>

Outro modo de executar um processo separado é utilizando o método *system* de *Kernel*. O método executa um comando dado a ele em um sub-processo; ele retorna *true* se o comando for encontrado e executado propriamente. Ele retorna *false* se o comando encerrar com um status de saída diferente de zero, e *nil* se o comando falhar ao executar. Lembre-se, a saída do comando simplesmente irá para o mesmo destino da saída do seu programa. 


<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
system("tar xzf teste.tgz") # => true
<% end -%>
