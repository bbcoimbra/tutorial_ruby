---
title:      Incluindo Outros Arquivos
created_at: 2009-12-23 14:29:25.387994 -02:00
filter:
 - erb
 - textile
---
p(title). <%= h(@page.title) %>

When writing your first few Ruby programs, you tend to place all of your code in a single file. But as you grow as a Ruby programmer, your Ruby programs will also grow, and at some point you will realize that having a single file containing all of your code just won't do. It is easier to break your code up into logical groupings and place each group in a separate file or files. When you begin using multiple files, you have a need for the Ruby's require and load  methods (both are global functions defined in Kernel, but are used like language keywords) that help you include other files in your program.

The load method includes the named Ruby source file every time the method is executed:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  load 'filename.rb'
<% end -%>

The more commonly used require method loads any given file only once:

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  require 'filename'
<% end -%>

require gives you access to the many extensions and programming libraries bundled with the Ruby programming language-as well as an even larger number of extensions and libraries written independently by other programmers and made available for use with Ruby.

Note that you say require 'filename', not require 'filename.rb'. Aside from looking nicer, this bareword way of referring to the extension is necessary because not all extensions use files ending in .rb. Specifically, extensions written in C are stored in files ending with .so or .dll. To keep the process transparent-that is, to save you the trouble of knowing whether the extension you want uses a .rb file or not-Ruby accepts a bareword and then does some automatic file-searching and trying out of possible filenames until it finds the file corresponding to the extension you have requested.

<div class='box'>
require(string) => true or false

Ruby tries to load the library named string, returning true if successful. If the filename does not resolve to an absolute path, it will be searched for in the directories listed in $:. If the file has the extension ".rb", it is loaded as a source file; if the extension is ".so", ".o", or ".dll", or whatever the default shared library extension is on the current platform, Ruby loads the shared library as a Ruby extension. Otherwise, Ruby tries adding ".rb", ".so", and so on to the name. The name of the loaded feature is added to the array in $:.
</div>

<div class='box'>
IN RAILS: Rails uses load in preference to require, for example, in development mode - which means that if you're trying your application in a browser and making changes to the code at the same time, your changes are reloaded, overriding any caching behavior on the part of the Web server. Multiple require calls in the same place don't have the same effect if the application has already read the file in once.
</div>

Now, let's look at an example of another class - p030motorcycle.rb

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  class MotorCycle
    def initialize(make, color)
      # Instance variables
      @make = make
      @color = color
      end
    def startEngine
      if (@engineState)
        puts 'Engine is already Running'
      else
        @engineState = true
        puts 'Engine Idle'
      end
    end
  end
<% end -%>

We write another program p031motorcycletest.rb to test out the above class.

<% coderay(:lang => "ruby", :line_numbers => "inline") do -%>
  # p031motorcycletest.rb
  require 'p030motorcycle'
  m = MotorCycle.new('Yamaha', 'red')
  m.startEngine
<% end -%>
